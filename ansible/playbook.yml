---
- name: Setup Docker Swarm Infrastructure
  hosts: all
  become: true
  vars:
    data_disk_device: /dev/vdb
    data_mount_point: /var/lib/docker/volumes
  
  tasks:
    - name: Check if data disk exists
      stat:
        path: "{{ data_disk_device }}"
      register: data_disk

    - name: Format data disk with ext4
      filesystem:
        fstype: ext4
        dev: "{{ data_disk_device }}"
      when: data_disk.stat.exists

    # FIX enquanto houver problema GRUB
    - name: Configure GRUB to install to main disk automatically
      debconf:
        name: grub-pc
        question: grub-pc/install_devices
        value: /dev/vda
        vtype: multiselect

    - name: Configure GRUB to not prompt for device selection
      debconf:
        name: grub-pc
        question: grub-pc/install_devices_empty
        value: 'false'
        vtype: boolean

    - name: Update and upgrade packages
      apt:
        update_cache: true
        upgrade: yes
      environment:
        DEBIAN_FRONTEND: noninteractive

    - name: Install required packages
      apt:
        name:
          - unattended-upgrades
          - ca-certificates
          - curl
          - gnupg
          - python3-pip
        update_cache: true

    - name: Enable unattended upgrades
      copy:
        content: |
          APT::Periodic::Update-Package-Lists "1";
          APT::Periodic::Unattended-Upgrade "1";
        dest: /etc/apt/apt.conf.d/20auto-upgrades

    - name: Add Docker GPG key
      apt_key:
        url: https://download.docker.com/linux/ubuntu/gpg

    - name: Add Docker repository
      apt_repository:
        repo: "deb [arch=amd64] https://download.docker.com/linux/ubuntu {{ ansible_distribution_release }} stable"

    - name: Install Docker
      apt:
        name:
          - docker-ce
          - docker-ce-cli
          - containerd.io

    - name: Create Docker service override directory
      file:
        path: /etc/systemd/system/docker.service.d
        state: directory
        mode: '0755'

    - name: Configure Docker daemon resource limits
      copy:
        content: |
          [Service]
          MemoryHigh=60%
          MemoryMax=80%
          MemoryAccounting=yes
        dest: /etc/systemd/system/docker.service.d/limits.conf
        mode: '0644'
      notify: restart docker

    - name: Start and enable Docker service
      systemd:
        name: docker
        state: started
        enabled: true
        daemon_reload: true

    - name: Install Docker Python module
      apt:
        name: python3-docker
        update_cache: true

    # Mount data disk to Docker volumes directory (no volumes exist yet after fresh install)
    - name: Mount data disk to Docker volumes directory
      mount:
        path: "{{ data_mount_point }}"
        src: "{{ data_disk_device }}"
        fstype: ext4
        opts: defaults
        state: mounted
      when: data_disk.stat.exists

    - name: Resize ext4 filesystem to use full disk
      command: resize2fs {{ data_disk_device }}
      when: data_disk.stat.exists

    - name: Calculate available memory for each host
      set_fact:
        available_memory_mb: "{{ ((ansible_memtotal_mb * 0.9) | int) - 300 }}"

  handlers:
    - name: restart docker
      systemd:
        name: docker
        state: restarted
        daemon_reload: true

- name: Initialize Docker Swarm
  hosts: managers[0]
  become: true
  tasks:
    - name: Initialize Docker Swarm
      community.docker.docker_swarm:
        state: present
        advertise_addr: "{{ private_ip }}"

    - name: Get swarm join tokens
      community.docker.docker_swarm_info:
      register: swarm_info

    - name: Store join tokens
      set_fact:
        manager_token: "{{ swarm_info.swarm_facts.JoinTokens.Manager }}"
        worker_token: "{{ swarm_info.swarm_facts.JoinTokens.Worker }}"

- name: Join managers to swarm
  hosts: managers[1:]
  become: true
  tasks:
    - name: Join as manager
      community.docker.docker_swarm:
        state: join
        advertise_addr: "{{ private_ip }}"
        join_token: "{{ hostvars[groups['managers'][0]]['manager_token'] }}"
        remote_addrs:
          - "{{ hostvars[groups['managers'][0]]['private_ip'] }}:2377"

- name: Join workers to swarm
  hosts: workers
  become: true
  tasks:
    - name: Join as worker
      community.docker.docker_swarm:
        state: join
        advertise_addr: "{{ private_ip }}"
        join_token: "{{ hostvars[groups['managers'][0]]['worker_token'] }}"
        remote_addrs:
          - "{{ hostvars[groups['managers'][0]]['private_ip'] }}:2377"

- name: Deploy Docker Stacks
  hosts: managers[0]
  become: true
  vars:
    stacks_directory: "{{ playbook_dir }}/stacks"
  tasks:
    - name: Install python3-jsondiff for stack management
      apt:
        name: python3-jsondiff
        state: present
        update_cache: true

    - name: Load secrets configuration
      include_vars:
        file: "{{ playbook_dir }}/secrets/secrets.yaml"
        name: secrets_config

    - name: Create Docker secrets from environment variables
      community.docker.docker_secret:
        name: "{{ item.name }}"
        data: "{{ lookup('env', item.env_var) }}"
        state: present
      loop: "{{ secrets_config.docker_secrets }}"
      when: 
        - secrets_config.docker_secrets is defined
        - lookup('env', item.env_var) != ""

    - name: Find stack files
      find:
        paths: "{{ stacks_directory }}"
        patterns: "*.yml,*.yaml"
      delegate_to: localhost
      become: false
      register: stack_files

    - name: Create stacks directory on manager
      file:
        path: /tmp/stacks
        state: directory
        mode: '0755'

    - name: Copy stack files to manager with template processing
      template:
        src: "{{ item.path }}"
        dest: "/tmp/stacks/{{ item.path | basename }}"
        mode: '0644'
      with_items: "{{ stack_files.files }}"
      when: stack_files.files | length > 0

    - name: Deploy each stack
      community.docker.docker_stack:
        name: "{{ item.path | basename | splitext | first }}"
        prune: true
        compose:
          - "/tmp/stacks/{{ item.path | basename }}"
        state: present
      with_items: "{{ stack_files.files }}"
      when: stack_files.files | length > 0